package storage;

import model.Food;

import java.time.LocalDate;
import java.util.List;

/**
 * Данный интерфейс определяет функционал хранилищ.
 *
 * Интерфейс реализует следующие принципы SOLID:
 * Open-closed principle, поскольку не используется конкретная реализация интерфейса лист и в качестве типа используется абстракция
 * Liskov substitution principle, так как с любой реализацией хранилища мы можем обращаться как с данным интерфейсом
 * Dependency inversion principle, так как все хранилища происходят от данной абстракции вне зависимости от их внутренней реализации
 *
 * Также данный интерфейс соответствует принципу DRY, так как вычисление степени исчерпанности сроков годности одинаково для всех реализаций
 * хранилищ и поэтому данный метод реализован в жанном интерфейсе по умолчанию
 */
public interface Store {
    /**
     * Если продукт подходит по условию, добавляет продукт в хранилище
     * @param food - продукт, который может быть добавлен
     */
    void add(Food food);

    /**
     * Удаляет продукт из хранилища
     * @param food - удаляемый продукт
     */
    void delete(Food food);

    /**
     * Проверяет продукт на условия для хранения
     * @param food - проверяемый продукт
     * @return - возвращает true, если продукт проходит для хранения и false, если продукт не подходит
     */
    boolean accept(Food food);

    /**
     * @return Возвращает список из всех продуктов хранилища
     */
    List<Food> getAll();

    /**
     * Вычисляет, насколько израсходован срок годности у продукта.
     * @param food - проверяемый продукт
     * @return возвращает число типа double. Чем число меньше, тем продукт свежее. Если число > 1, срок годности вышел
     */
    default double storage(Food food) {
        return (double) (LocalDate.now().toEpochDay() - food.getCreateDate().toEpochDay())
                / (double) (food.getExpiryDate().toEpochDay() - food.getCreateDate().toEpochDay());
    }
}